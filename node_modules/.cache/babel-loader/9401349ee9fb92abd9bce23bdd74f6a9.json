{"ast":null,"code":"\"use strict\";\n\nvar objectAssign = require('object-assign');\n\nvar getImageUrl = require('./getImageUrl');\n\nmodule.exports = function (h, serializerOpts) {\n  var serializeOptions = serializerOpts || {\n    useDashedStyles: false\n  }; // Low-level block serializer\n\n  function BlockSerializer(props) {\n    var node = props.node,\n        serializers = props.serializers,\n        options = props.options,\n        isInline = props.isInline,\n        children = props.children;\n    var blockType = node._type;\n    var serializer = serializers.types[blockType];\n\n    if (!serializer) {\n      if (options.ignoreUnknownTypes) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Unknown block type \\\"\".concat(blockType, \"\\\", please specify a serializer for it in the `serializers.types` prop\"));\n        return h(serializers.unknownType, {\n          node: node,\n          options: options,\n          isInline: isInline\n        }, children);\n      }\n\n      throw new Error(\"Unknown block type \\\"\".concat(blockType, \"\\\", please specify a serializer for it in the `serializers.types` prop\"));\n    }\n\n    return h(serializer, {\n      node: node,\n      options: options,\n      isInline: isInline\n    }, children);\n  } // Low-level span serializer\n\n\n  function SpanSerializer(props) {\n    var _props$node = props.node,\n        mark = _props$node.mark,\n        children = _props$node.children;\n    var isPlain = typeof mark === 'string';\n    var markType = isPlain ? mark : mark._type;\n    var serializer = props.serializers.marks[markType];\n\n    if (!serializer) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Unknown mark type \\\"\".concat(markType, \"\\\", please specify a serializer for it in the `serializers.marks` prop\"));\n      return h(props.serializers.unknownMark, null, children);\n    }\n\n    return h(serializer, props.node, children);\n  } // Low-level list serializer\n\n\n  function ListSerializer(props) {\n    var tag = props.type === 'bullet' ? 'ul' : 'ol';\n    return h(tag, null, props.children);\n  } // Low-level list item serializer\n\n\n  function ListItemSerializer(props) {\n    var children = !props.node.style || props.node.style === 'normal' ? // Don't wrap plain text in paragraphs inside of a list item\n    props.children : // But wrap any other style in whatever the block serializer says to use\n    h(props.serializers.types.block, props, props.children);\n    return h('li', null, children);\n  } // Unknown type default serializer\n\n\n  function DefaultUnknownTypeSerializer(props) {\n    return h('div', {\n      style: {\n        display: 'none'\n      }\n    }, \"Unknown block type \\\"\".concat(props.node._type, \"\\\", please specify a serializer for it in the `serializers.types` prop\"));\n  } // Renderer of an actual block of type `block`. Confusing, we know.\n\n\n  function BlockTypeSerializer(props) {\n    var style = props.node.style || 'normal';\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children);\n    }\n\n    return style === 'blockquote' ? h('blockquote', null, props.children) : h('p', null, props.children);\n  } // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n\n\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children);\n  }\n\n  function UnderlineSerializer(props) {\n    var style = serializeOptions.useDashedStyles ? {\n      'text-decoration': 'underline'\n    } : {\n      textDecoration: 'underline'\n    };\n    return h('span', {\n      style: style\n    }, props.children);\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children);\n  }\n\n  function LinkSerializer(props) {\n    return h('a', {\n      href: props.mark.href\n    }, props.children);\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null;\n    }\n\n    var img = h('img', {\n      src: getImageUrl(props)\n    });\n    return props.isInline ? img : h('figure', null, img);\n  } // Serializer that recursively calls itself, producing a hyperscript tree of spans\n\n\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {\n        key: \"hb-\".concat(index)\n      });\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, {\n        key: \"text-\".concat(index)\n      }, span) : span;\n    }\n\n    var children;\n\n    if (span.children) {\n      children = {\n        children: span.children.map(function (child, i) {\n          return options.serializeNode(child, i, span.children, true);\n        })\n      };\n    }\n\n    var serializedNode = objectAssign({}, span, children);\n    return h(serializers.span, {\n      key: span._key || \"span-\".concat(index),\n      node: serializedNode,\n      serializers: serializers\n    });\n  }\n\n  var HardBreakSerializer = function HardBreakSerializer() {\n    return h('br');\n  };\n\n  var defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  };\n  var defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n    unknownType: DefaultUnknownTypeSerializer,\n    unknownMark: 'span',\n    // Container element\n    container: 'div',\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  };\n  return {\n    defaultSerializers: defaultSerializers,\n    serializeSpan: serializeSpan\n  };\n};","map":{"version":3,"sources":["../src/serializers.js"],"names":["objectAssign","require","getImageUrl","module","serializeOptions","serializerOpts","useDashedStyles","node","serializers","options","isInline","children","props","blockType","serializer","console","h","mark","isPlain","markType","tag","style","display","textDecoration","href","img","src","span","key","serializedNode","HardBreakSerializer","defaultMarkSerializers","strong","RawMarkSerializer","em","code","underline","link","LinkSerializer","defaultSerializers","types","block","image","ImageSerializer","marks","list","listItem","hardBreak","unknownType","unknownMark","container","text","empty","serializeSpan"],"mappings":"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","sourcesContent":["const objectAssign = require('object-assign')\nconst getImageUrl = require('./getImageUrl')\n\nmodule.exports = (h, serializerOpts) => {\n  const serializeOptions = serializerOpts || {useDashedStyles: false}\n\n  // Low-level block serializer\n  function BlockSerializer(props) {\n    const {node, serializers, options, isInline, children} = props\n    const blockType = node._type\n    const serializer = serializers.types[blockType]\n    if (!serializer) {\n      if (options.ignoreUnknownTypes) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n        )\n        return h(serializers.unknownType, {node, options, isInline}, children)\n      }\n      throw new Error(\n        `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n      )\n    }\n\n    return h(serializer, {node, options, isInline}, children)\n  }\n\n  // Low-level span serializer\n  function SpanSerializer(props) {\n    const {mark, children} = props.node\n    const isPlain = typeof mark === 'string'\n    const markType = isPlain ? mark : mark._type\n    const serializer = props.serializers.marks[markType]\n    if (!serializer) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Unknown mark type \"${markType}\", please specify a serializer for it in the \\`serializers.marks\\` prop`\n      )\n      return h(props.serializers.unknownMark, null, children)\n    }\n\n    return h(serializer, props.node, children)\n  }\n\n  // Low-level list serializer\n  function ListSerializer(props) {\n    const tag = props.type === 'bullet' ? 'ul' : 'ol'\n    return h(tag, null, props.children)\n  }\n\n  // Low-level list item serializer\n  function ListItemSerializer(props) {\n    const children =\n      !props.node.style || props.node.style === 'normal'\n        ? // Don't wrap plain text in paragraphs inside of a list item\n          props.children\n        : // But wrap any other style in whatever the block serializer says to use\n          h(props.serializers.types.block, props, props.children)\n\n    return h('li', null, children)\n  }\n\n  // Unknown type default serializer\n  function DefaultUnknownTypeSerializer(props) {\n    return h(\n      'div',\n      {style: {display: 'none'}},\n      `Unknown block type \"${\n        props.node._type\n      }\", please specify a serializer for it in the \\`serializers.types\\` prop`\n    )\n  }\n\n  // Renderer of an actual block of type `block`. Confusing, we know.\n  function BlockTypeSerializer(props) {\n    const style = props.node.style || 'normal'\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children)\n    }\n\n    return style === 'blockquote'\n      ? h('blockquote', null, props.children)\n      : h('p', null, props.children)\n  }\n\n  // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children)\n  }\n\n  function UnderlineSerializer(props) {\n    const style = serializeOptions.useDashedStyles\n      ? {'text-decoration': 'underline'}\n      : {textDecoration: 'underline'}\n\n    return h('span', {style}, props.children)\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children)\n  }\n\n  function LinkSerializer(props) {\n    return h('a', {href: props.mark.href}, props.children)\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null\n    }\n\n    const img = h('img', {src: getImageUrl(props)})\n    return props.isInline ? img : h('figure', null, img)\n  }\n\n  // Serializer that recursively calls itself, producing a hyperscript tree of spans\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {key: `hb-${index}`})\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, {key: `text-${index}`}, span) : span\n    }\n\n    let children\n    if (span.children) {\n      children = {\n        children: span.children.map((child, i) =>\n          options.serializeNode(child, i, span.children, true)\n        )\n      }\n    }\n\n    const serializedNode = objectAssign({}, span, children)\n\n    return h(serializers.span, {\n      key: span._key || `span-${index}`,\n      node: serializedNode,\n      serializers\n    })\n  }\n\n  const HardBreakSerializer = () => h('br')\n  const defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  }\n\n  const defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n\n    unknownType: DefaultUnknownTypeSerializer,\n    unknownMark: 'span',\n\n    // Container element\n    container: 'div',\n\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  }\n\n  return {\n    defaultSerializers,\n    serializeSpan\n  }\n}\n"]},"metadata":{},"sourceType":"script"}